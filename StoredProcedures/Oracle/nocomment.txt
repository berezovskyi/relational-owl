CREATE OR REPLACE FUNCTION METADATA_AS_RAW_XML
( 
table_name  STRING DEFAULT 'RETURN_ALL_TABLES'
)         
RETURN XMLType                
AS          
handle NUMBER;            
transform_handle NUMBER;   
temp_clob CLOB;   
final_clob CLOB;  
BEGIN          
handle := DBMS_METADATA.OPEN('TABLE');        
transform_handle := DBMS_METADATA.ADD_TRANSFORM(handle,'MODIFY'); 
if table_name != 'RETURN_ALL_TABLES'      
 then DBMS_METADATA.SET_FILTER(handle,'NAME', table_name);  
end if;      
LOOP                        
 temp_clob:=DBMS_METADATA.FETCH_CLOB(handle); 
EXIT WHEN temp_clob IS NULL;      
 final_clob:=final_clob||temp_clob;   
END LOOP;      
DBMS_METADATA.CLOSE(handle);   
final_clob:='<DATABASE>'||final_clob||'</DATABASE>';  
return XMLType(final_clob); 
end;


-------------------------------------------------------------------------------



CREATE OR REPLACE FUNCTION DATA_AS_RAW_XML
(    
table_name  STRING DEFAULT 'RETURN_ALL_TABLES'
)                                                    
RETURN XMLType                                       
AS 
temp_table_name varchar(255);                        
temp_clob CLOB;                                    
final_clob CLOB;                                   
query_result CLOB;                                   
CURSOR name_cursor IS select table_name from tabs;   
begin    
if table_name='RETURN_ALL_TABLES'                     
 then   
 OPEN name_cursor;                                  
 LOOP                                               
  FETCH name_cursor INTO temp_table_name;        
 EXIT WHEN name_cursor%NOTFOUND;                    
  query_result:=DBMS_XMLQuery.getXML('select * from '||temp_table_name);  
  temp_clob:=temp_clob||                     
  '<TABLE name="'||temp_table_name||'">'||       
  query_result||  
  '</TABLE>';    
 END LOOP;                                           
 CLOSE name_cursor;                                  
 else                                                
 query_result:=DBMS_XMLQuery.getXML('select * from '||table_name);  
 temp_clob:=temp_clob||                         
 '<TABLE name="'||table_name||'">'||    
 query_result||  
 '</TABLE>';    
end if;  
temp_clob:=replace(temp_clob,'<?xml version = ''1.0''?>');  
final_clob:='<DATABASE>'||temp_clob||'</DATABASE>';         
return XMLType(final_clob);                                   
END;


-------------------------------------------------------------------------------



CREATE OR REPLACE FUNCTION METADATA_AS_OWL
(      
database_name STRING,      
table_name STRING DEFAULT 'RETURN_ALL_TABLES'   
)              
RETURN XMLType           
AS               
return_doc XMLType;    
meta_data_doc  XMLType;    
dbname_doc  XMLType;   
BEGIN          
meta_data_doc:=METADATA_AS_RAW_XML(table_name);   
dbname_doc:=XMLType('<dbname value="'||database_name||'"/>');    
SELECT          
XMLQuery(          
' 
<rdf:RDF 
xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"  
xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#" 
xmlns:owl="http://www.w3.org/2002/07/owl#" 
xmlns:xsd="http://www.w3.org/2001/XMLSchema#" 
xmlns:dbs="http://www.dbs.cs.uni-duesseldorf.de/RDF/relational.owl#" 
>        
<owl:Class rdf:ID="{data($dbn_doc/dbname/@value)}">   
{ 
<rdf:type rdf:resource="http://www.dbs.cs.uni-duesseldorf.de/RDF/relational.owl#Database"/>,  
for $tab_name in $md_doc/DATABASE/ROWSET/ROW/TABLE_T/SCHEMA_OBJ/NAME       
return  
 <dbs:hasTable rdf:resource="{concat("#",data($tab_name))}" />      
} 
</owl:Class> 
{ 
for $table in $md_doc/DATABASE/ROWSET/ROW/TABLE_T      
return  
 <owl:Class rdf:ID="{data($table/SCHEMA_OBJ/NAME)}">  
 <rdf:type rdf:resource="http://www.dbs.cs.uni-duesseldorf.de/RDF/relational.owl#Table"/>  
 { 
 for $col_name in $table/COL_LIST/COL_LIST_ITEM/NAME    
 return 
  <dbs:hasColumn rdf:resource= 
  "{concat(concat(concat("#",data($table/SCHEMA_OBJ/NAME)),"."),data($col_name))}"/>  
 } 
 { 
 if ($table/CON1_LIST/CON1_LIST_ITEM[CONTYPE="2"])  
  then              
  <dbs:isIdentifiedBy>              
   <dbs:PrimaryKey> 
   { 
   for $pkey_col_name in $table/CON1_LIST/CON1_LIST_ITEM[CONTYPE="2"]/COL_LIST/COL_LIST_ITEM/COL/NAME  
   return  
    <dbs:hasColumn rdf:resource= 
    "{concat(concat(concat("#",data($table/SCHEMA_OBJ/NAME)),"."),data($pkey_col_name))}"/> 
   } 
   </dbs:PrimaryKey> 
  </dbs:isIdentifiedBy> 
  else "" 
 } 
</owl:Class> 
}     
{      
for $table in $md_doc/DATABASE/ROWSET/ROW/TABLE_T  
 for $column in $table/COL_LIST/COL_LIST_ITEM 
 return 
  <owl:DatatypeProperty rdf:ID="{concat(concat(data($table/SCHEMA_OBJ/NAME),"."),data($column/NAME))}">    
  <rdf:type rdf:resource="http://www.dbs.cs.uni-duesseldorf.de/RDF/relational.owl#Column"/> 
  <rdfs:domain rdf:resource="{concat("#",data($table/SCHEMA_OBJ/NAME))}"/>  
  { 
  if($column[TYPE_NUM="1"] or $column[TYPE_NUM="96"])  
   then <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>  
   else if ($column[TYPE_NUM="12"])                  
           then <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#date"/> 
           else if($column[TYPE_NUM="2"] and $column/SCALE and $column/PRECISION_NUM)  
                   then <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#decimal"/> 
                   else if($column[TYPE_NUM="2"] and $column/SCALE)    
                           then <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/> 
                           else if($column[TYPE_NUM="2"] and $column/PRECISION_NUM)  
                                  then <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#float"/> 
                                  else if($column[TYPE_NUM="180"])  
                                          then <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#dateTime"/>  
                                          else "" 
  } 
  { 
  if($column[TYPE_NUM="1"] or $column[TYPE_NUM="96"])  
   then <dbs:length>{data($column/LENGTH)}</dbs:length>  
   else if ($column[TYPE_NUM="2"] and $column/PRECISION_NUM)  
           then <dbs:length>{data($column/PRECISION_NUM)}</dbs:length>  
           else "" 
  } 
  { 
  if($column[TYPE_NUM="2"] and $column/PRECISION_NUM and $column/SCALE) 
   then <dbs:scale>{data($column/SCALE)}</dbs:scale> 
   else "" 
  } 
  { 
  for $constraint in $table/CON2_LIST/CON2_LIST_ITEM[CONTYPE="4"] 
   for $fkey_col in $constraint/SRC_COL_LIST/SRC_COL_LIST_ITEM      
    for $target_col in $fkey_col/../../TGT_COL_LIST/TGT_COL_LIST_ITEM
    where $column/NAME eq $fkey_col/COL/NAME and $target_col/POS_NUM eq $fkey_col/POS_NUM 
    return  
    <dbs:references rdf:resource= 
    "{concat(concat(concat("#",data($fkey_col/../../SCHEMA_OBJ/NAME)),"."),data($target_col/COL/NAME))}"/> 
  } 
  </owl:DatatypeProperty>	 
} 
</rdf:RDF> 
'          
PASSING meta_data_doc AS "md_doc", dbname_doc AS "dbn_doc"       
RETURNING CONTENT) INTO return_doc FROM DUAL;  
return_doc:=XMLType('<?xml version = "1.0" encoding = "ISO-8859-1"?>'|| 
XMLType.getClobVal(return_doc));        
return return_doc;  
END;



-------------------------------------------------------------------------------



CREATE OR REPLACE FUNCTION DATA_AS_OWL
(   
schema_url STRING,                 
table_name STRING default 'RETURN_ALL_TABLES'   
)            
RETURN XMLType            
AS            
return_doc XMLType;        
table_data_doc XMLType;         
begin            
table_data_doc:=DATA_AS_RAW_XML(table_name);  
SELECT         
XMLQuery(         
'     
<rdf:RDF                                                                      
xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"       
xmlns:dbinst="SCHEMA_PLACEHOLDER#"       
>       
{       
for $table in $data_doc/DATABASE/TABLE 
 for $row in $table/ROWSET/*               
 let $tab_name:=$table/data(@name)    
 return 
 element {concat("dbinst:", $tab_name)}  
 {         
  for $column in $row/*         
  return 
  element{concat(concat(concat("dbinst:",$tab_name),"."),name($column))}  
  {
   data($column)
  } 
 }       
}         
</rdf:RDF>       
'         
PASSING table_data_doc AS "data_doc"                  
RETURNING CONTENT) INTO return_doc FROM DUAL;     
return_doc:=XMLType('<?xml version = "1.0" encoding = "ISO-8859-1"?>'||
replace(XMLType.getClobVal(return_doc),'SCHEMA_PLACEHOLDER',schema_url));     
return return_doc;         
END;    



-------------------------------------------------------------------------------



CREATE OR REPLACE FUNCTION METADATA_AS_OWL_WITH_XSLT
(     
database_name in STRING,     
table_name STRING DEFAULT 'RETURN_ALL_TABLES'   
)              
RETURN XMLType           
AS            
return_doc XMLType;   
meta_data_doc  XMLType; 
XSLT_doc XMLType;   
BEGIN             
meta_data_doc:=METADATA_AS_RAW_XML(table_name);
XSLT_doc:=XMLType(                        
'     
<xsl:stylesheet version="1.0"                       
xmlns:xsl="http://www.w3.org/1999/XSL/Transform"     
>
<xsl:param name="DBNAME"/>                                   
<!--<DATABASE> element serves as "entrance" -->                      
<xsl:template match="/DATABASE">    
<rdf:RDF           
xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"     
xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"     
xmlns:owl="http://www.w3.org/2002/07/owl#"     
xmlns:xsd="http://www.w3.org/2001/XMLSchema#"     
xmlns:dbs="http://www.dbs.cs.uni-duesseldorf.de/RDF/relational.owl#"      
>                                     
<owl:Class rdf:ID="{$DBNAME}">   
<rdf:type rdf:resource="http://www.dbs.cs.uni-duesseldorf.de/RDF/relational.owl#Database" />   
<xsl:for-each select="ROWSET/ROW/TABLE_T/SCHEMA_OBJ/NAME"> 
 <dbs:hasTable rdf:resource="#{.}" />      
</xsl:for-each>   
</owl:Class>   
<xsl:for-each select="ROWSET/ROW/TABLE_T">   
 <owl:Class rdf:ID="{SCHEMA_OBJ/NAME}">           
 <rdf:type rdf:resource="http://www.dbs.cs.uni-duesseldorf.de/RDF/relational.owl#Table"/> 
 <xsl:for-each select="COL_LIST/COL_LIST_ITEM/NAME">   
  <dbs:hasColumn rdf:resource="#{../../../SCHEMA_OBJ/NAME}{.{.}"/>  
 </xsl:for-each>   
 <xsl:if  test ="CON1_LIST/CON1_LIST_ITEM/CONTYPE=2">  
  <dbs:isIdentifiedBy>									
   <dbs:PrimaryKey>	  
    <xsl:for-each select="CON1_LIST/CON1_LIST_ITEM[CONTYPE=2]/COL_LIST/COL_LIST_ITEM/COL/NAME"> 
     <dbs:hasColumn rdf:resource="#{../../../../../../SCHEMA_OBJ/NAME}{.{.}"/>
    </xsl:for-each>   
   </dbs:PrimaryKey>					  
  </dbs:isIdentifiedBy>						  
 </xsl:if>  
 </owl:Class>   
</xsl:for-each>   
<xsl:for-each select="ROWSET/ROW/TABLE_T">    
 <xsl:for-each select="COL_LIST/COL_LIST_ITEM">  	   
  <owl:DatatypeProperty rdf:ID="{../../SCHEMA_OBJ/NAME}{.{NAME}">
  <rdf:type rdf:resource="http://www.dbs.cs.uni-duesseldorf.de/RDF/relational.owl#Column"/>  
  <rdfs:domain rdf:resource="#{../../SCHEMA_OBJ/NAME}"/>  
  <xsl:choose>  
   <xsl:when test="TYPE_NUM=1 or TYPE_NUM=96">  
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>  
   </xsl:when>  
   <xsl:when test="TYPE_NUM=12">  
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#date"/>  
   </xsl:when>  
   <xsl:when test="TYPE_NUM=2 and SCALE and PRECISION_NUM">  
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#decimal"/>  
   </xsl:when>  
   <xsl:when test="TYPE_NUM=2 and SCALE">  
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>    
   </xsl:when>  
   <xsl:when test="TYPE_NUM=2 and PRECISION_NUM">  
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#float"/>  
   </xsl:when>  
   <xsl:when test="TYPE_NUM=180">  
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#dateTime"/>  
   </xsl:when>  
  </xsl:choose>	
  <xsl:choose>  
   <xsl:when test="TYPE_NUM=1 or TYPE_NUM=96">  
    <dbs:length>
     <xsl:value-of select="LENGTH"/>
    </dbs:length>  
   </xsl:when>  
   <xsl:when test="TYPE_NUM=2 and PRECISION_NUM">  
    <dbs:length>
     <xsl:value-of select="PRECISION_NUM"/>
    </dbs:length>  
   </xsl:when>  
  </xsl:choose>	
  <xsl:if test="TYPE_NUM=2 and PRECISION_NUM and SCALE">  
   <dbs:scale>
    <xsl:value-of select="SCALE"/>
   </dbs:scale>     
  </xsl:if>    
  <xsl:variable  name = "column"  select ="."/>  
  <xsl:for-each select="../../CON2_LIST/CON2_LIST_ITEM[CONTYPE=4]">    
   <xsl:for-each select="SRC_COL_LIST/SRC_COL_LIST_ITEM">    
    <xsl:variable  name = "fkey_col"  select ="."/>  
    <xsl:for-each select="../../TGT_COL_LIST/TGT_COL_LIST_ITEM"> 
     <xsl:variable  name = "target_col"  select ="."/>  
     <xsl:if test="$column/NAME=$fkey_col/COL/NAME and $target_col/POS_NUM=$fkey_col/POS_NUM">  
      <dbs:references rdf:resource="#{$fkey_col/../../SCHEMA_OBJ/NAME}{.{$target_col/COL/NAME}"/>  		    
     </xsl:if>  
    </xsl:for-each> 
   </xsl:for-each> 
  </xsl:for-each>  
  </owl:DatatypeProperty>	     
 </xsl:for-each> 
</xsl:for-each>  
</rdf:RDF>     
</xsl:template>     
</xsl:stylesheet>     
'     
);      
return_doc:=meta_data_doc.transform(XSLT_doc,'DBNAME=""'||database_name||'""');  
return_doc:=XMLType('<?xml version = "1.0" encoding="ISO-8859-1"?>'||
XMLType.getClobVal(return_doc));              
return return_doc; 
END;



-------------------------------------------------------------------------------



CREATE OR REPLACE FUNCTION DATA_AS_OWL_WITH_XSLT
(
schema_url STRING, 
table_name STRING default 'RETURN_ALL_TABLES'   
)             
RETURN XMLType            
AS             
return_doc XMLType;      
XSLT_doc XMLType;        
table_data_doc XMLType;         
BEGIN             
table_data_doc:=DATA_AS_RAW_XML(table_name);  
XSLT_doc:=XMLType(     
'   
<xsl:stylesheet version="1.0"       
xmlns:xsl="http://www.w3.org/1999/XSL/Transform"   
 >  
<xsl:template match="/DATABASE"> 
<rdf:RDF xmlns:dbinst="SCHEMA_PLACEHOLDER" xmlns:rdf ="http://www.w3.org/1999/02/22-rdf-syntax-ns#">  
<xsl:for-each select="TABLE/ROWSET">   
 <xsl:for-each select="ROW">   
  <xsl:element name="dbinst:{../../@name}"  namespace="SCHEMA_PLACEHOLDER">  
   <xsl:for-each select="*">  
    <xsl:element name="dbinst:{../../../@name}{.{name(.)}" namespace="SCHEMA_PLACEHOLDER">  
     <xsl:value-of select="."/> 
    </xsl:element>  
   </xsl:for-each>  
  </xsl:element>  
 </xsl:for-each> 
</xsl:for-each>  
</rdf:RDF>   
</xsl:template>   
</xsl:stylesheet>   
'   
);    
return_doc:=table_data_doc.transform(XSLT_doc);        
return_doc:=XMLType('<?xml version = "1.0" encoding = "ISO-8859-1"?>'||
replace(XMLType.getClobVal(return_doc),'SCHEMA_PLACEHOLDER',schema_url));       
return return_doc;             
END;      



-------------------------------------------------------------------------------




CREATE OR REPLACE PROCEDURE EXTRACT_METADATA_INTO_FILE
(      
database_name string,      
directory_name string,               
file_name string,               
use_xslt boolean,                 
table_name string default 'RETURN_ALL_TABLES'    
)               
AS
xml_clob CLOB;           
buffer VARCHAR2(32767);  
amount INTEGER;               
offset NUMBER;                
e_invalid_table EXCEPTION;     
filehandle UTL_FILE.FILE_TYPE; 
xml_document XMLType;             
temp_table_name varchar(255);               
table_ok boolean;                        
CURSOR name_cursor IS select table_name from tabs;    
BEGIN            
table_ok:=FALSE;                            
OPEN name_cursor;                           
LOOP                                   
 FETCH name_cursor INTO temp_table_name;
EXIT WHEN name_cursor%NOTFOUND;  
 if table_name=temp_table_name OR table_name='RETURN_ALL_TABLES'   
  then     
   table_ok:=TRUE;    
   EXIT;     
 end if;     
END LOOP;     
CLOSE name_cursor;     
if NOT table_ok              
 then RAISE e_invalid_table; 
end if;     
if use_xslt   
 then xml_document:=METADATA_AS_OWL_WITH_XSLT(database_name,table_name); 
 else xml_document:=METADATA_AS_OWL(database_name,table_name);   
end if;     
filehandle:=UTL_FILE.FOPEN(directory_name,file_name,'W',32767);        
amount := 32767;                                                   
offset := 1;                                   
xml_clob:=XMLType.getClobVal(xml_document);    
WHILE amount >= 32767                                      
LOOP
 DBMS_LOB.READ(xml_clob, amount, offset,buffer); 
 offset := offset + amount;                         
 UTL_FILE.PUT(filehandle,buffer);                
 UTL_FILE.FFLUSH(filehandle);                    
END LOOP;
UTL_FILE.FCLOSE(filehandle);            
EXCEPTION              
WHEN e_invalid_table THEN     
 DBMS_OUTPUT.PUT_LINE('invalid table name');     
WHEN UTL_FILE.ACCESS_DENIED THEN                
 DBMS_OUTPUT.PUT_LINE('file access denied');     
WHEN UTL_FILE.INVALID_FILENAME THEN                
 DBMS_OUTPUT.PUT_LINE('invalid file name');          
WHEN UTL_FILE.INVALID_PATH THEN                
 DBMS_OUTPUT.PUT_LINE('invalid path');          
WHEN UTL_FILE.WRITE_ERROR THEN                
 DBMS_OUTPUT.PUT_LINE('error while writing into file');                         
WHEN UTL_FILE.FILE_OPEN THEN                
 DBMS_OUTPUT.PUT_LINE('file is already open');        
WHEN OTHERS THEN                                            
 DBMS_OUTPUT.PUT_LINE('unknown error');                                 
END;   


-------------------------------------------------------------------------------



CREATE OR REPLACE PROCEDURE EXTRACT_DATA_INTO_FILE
(      
schema_url string,    
directory_name string,               
file_name string,               
use_xslt boolean,                 
table_name string default 'RETURN_ALL_TABLES'    
)               
AS
xml_clob CLOB;           
buffer VARCHAR2(32767);  
amount INTEGER;               
offset NUMBER;                
e_invalid_table EXCEPTION;     
filehandle UTL_FILE.FILE_TYPE; 
xml_document XMLType;             
temp_table_name varchar(255);               
table_ok boolean;                        
CURSOR name_cursor IS select table_name from tabs;    
BEGIN            
table_ok:=FALSE;                            
OPEN name_cursor;                           
LOOP                                   
 FETCH name_cursor INTO temp_table_name;
EXIT WHEN name_cursor%NOTFOUND;  
 if table_name=temp_table_name OR table_name='RETURN_ALL_TABLES'   
  then     
   table_ok:=TRUE;    
   EXIT;     
 end if;     
END LOOP;     
CLOSE name_cursor;     
if NOT table_ok              
 then RAISE e_invalid_table; 
end if;     
if use_xslt   
 then xml_document:=DATA_AS_OWL_WITH_XSLT(schema_url,table_name); 
 else xml_document:=DATA_AS_OWL(schema_url,table_name);  
end if;     
filehandle:=UTL_FILE.FOPEN(directory_name,file_name,'W',32767);        
amount := 32767;                                                   
offset := 1;                                   
xml_clob:=XMLType.getClobVal(xml_document);    
WHILE amount >= 32767                                      
LOOP
 DBMS_LOB.READ(xml_clob, amount, offset,buffer); 
 offset := offset + amount;                         
 UTL_FILE.PUT(filehandle,buffer);                
 UTL_FILE.FFLUSH(filehandle);                    
END LOOP;
UTL_FILE.FCLOSE(filehandle);            
EXCEPTION              
WHEN e_invalid_table THEN     
 DBMS_OUTPUT.PUT_LINE('invalid table name');     
WHEN UTL_FILE.ACCESS_DENIED THEN                
 DBMS_OUTPUT.PUT_LINE('file access denied');     
WHEN UTL_FILE.INVALID_FILENAME THEN                
 DBMS_OUTPUT.PUT_LINE('invalid file name');          
WHEN UTL_FILE.INVALID_PATH THEN                
 DBMS_OUTPUT.PUT_LINE('invalid path');          
WHEN UTL_FILE.WRITE_ERROR THEN                
 DBMS_OUTPUT.PUT_LINE('error while writing into file');                         
WHEN UTL_FILE.FILE_OPEN THEN                
 DBMS_OUTPUT.PUT_LINE('file is already open');        
WHEN OTHERS THEN                                            
 DBMS_OUTPUT.PUT_LINE('unknown error');                                 
END;   

